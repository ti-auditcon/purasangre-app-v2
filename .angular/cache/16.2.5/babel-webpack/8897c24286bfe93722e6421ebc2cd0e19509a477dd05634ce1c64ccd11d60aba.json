{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { User } from '../../models/users/user.model';\nimport { ProfileService } from '../profile/profile.service';\nimport { LoadingController } from '@ionic/angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../profile/profile.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic/angular\";\nconst TOKEN_KEY = 'auth-token';\nconst REFRESH_TOKEN = 'refresh-token';\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    /**\n     * check with the user model if user is authenticated,\n     * checkin the token\n     *\n     * @return  boolean\n     */\n    get userIsAuthenticated() {\n      return this._user.asObservable().pipe(map(user => {\n        if (user) {\n          // the !! forces to response like a boolean\n          return !!user.token;\n        }\n        return false;\n      }));\n    }\n    constructor(http, profileService, router, loadingCtrl) {\n      this.http = http;\n      this.profileService = profileService;\n      this.router = router;\n      this.loadingCtrl = loadingCtrl;\n      // tslint:disable-next-line: variable-name\n      this._user = new BehaviorSubject(null);\n      this.authenticationState = new BehaviorSubject(false);\n    }\n    autoLogin() {\n      return from(Plugins.Storage.get({\n        key: 'authData'\n      })).pipe(map(storeData => {\n        // console.log(storeData);\n        if (!storeData || !storeData.value) {\n          console.log('!storeData');\n          return null;\n        }\n        const parsedData = JSON.parse(storeData.value);\n        const expirationTime = new Date(parsedData.tokenExpirationDate);\n        if (expirationTime <= new Date()) {\n          return null;\n        }\n        const user = new User(parsedData.email, parsedData.tokenType, parsedData.token, parsedData.refreshToken, expirationTime);\n        return user;\n      }), tap(user => {\n        if (user) {\n          this._user.next(user);\n        }\n      }), map(user => {\n        return !!user;\n      }));\n    }\n    login(email, password) {\n      // console.log(email, password);\n      const data = JSON.stringify({\n        username: email,\n        password,\n        grant_type: 'password',\n        client_id: 2,\n        client_secret: environment.purasangreAPIKey\n      });\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post(`${environment.SERVER_URL}/oauth/token`, data, httpOptions).pipe(tap(this.setUserData.bind(this, email)));\n    }\n    logout() {\n      this.loadingCtrl.create({\n        keyboardClose: true,\n        message: 'Cerrando Sesión...',\n        spinner: 'crescent'\n      }).then(loadingEl => {\n        // Load modal\n        loadingEl.present();\n        // Make the login\n        const res = this.getOut();\n        console.log('el res es ' + res);\n        if (res == null) {\n          this.router.navigateByUrl('/auth');\n          loadingEl.dismiss();\n        }\n      });\n    }\n    /**\n     * Clean all the data storage in the App\n     *\n     * @return  null\n     */\n    getOut() {\n      Plugins.Storage.clear();\n      this.profileService.nullProfile();\n      return this._user.next(null);\n    }\n    setUserData(email, userData) {\n      const expirationTime = new Date(new Date().getTime() + +userData.expires_in * 1000);\n      this._user.next(new User(email, userData.token_type, userData.access_token, userData.refresh_token, expirationTime));\n      this.storeAuthData(email, userData.token_type, userData.access_token, userData.refresh_token, expirationTime.toString());\n    }\n    /** This allow to storage the user on app storage */\n    storeAuthData(email, tokenType, token, refreshToken, tokenExpirationDate) {\n      const data = JSON.stringify({\n        email,\n        tokenType,\n        token,\n        refreshToken,\n        tokenExpirationDate\n      });\n      Plugins.Storage.set({\n        key: 'authData',\n        value: data\n      });\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProfileService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.LoadingController));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
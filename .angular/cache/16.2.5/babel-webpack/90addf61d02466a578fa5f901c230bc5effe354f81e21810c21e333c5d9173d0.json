{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { Profile } from '../../models/users/profile.model';\nimport { Preferences } from '@capacitor/preferences';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst TOKEN_KEY = 'auth-token';\nlet ProfileService = /*#__PURE__*/(() => {\n  class ProfileService {\n    /**\n     * Get local profile\n     */\n    get profile() {\n      // console.log(this._profile.value);\n      return this._profile.asObservable();\n    }\n    /**\n     * Get the user id from the Profile Model\n     *\n     * @return string (yes, it's an string)\n     */\n    get profileId() {\n      return this._profile.asObservable().pipe(map(profile => {\n        if (profile) {\n          return !!profile.id;\n        }\n        return false;\n      }));\n    }\n    constructor(http) {\n      this.http = http;\n      // private user = new BehaviorSubject<User>(null);\n      // tslint:disable-next-line: variable-name\n      this._profile = new BehaviorSubject(null);\n    }\n    nullProfile() {\n      this._profile.next(null);\n    }\n    fetchProfile() {\n      return from(Preferences.get({\n        key: 'authData'\n      })).pipe(map(storeData => {\n        if (storeData && storeData.value) {\n          const parsedData = JSON.parse(storeData.value);\n          const httpOptions = {\n            headers: new HttpHeaders({\n              Authorization: `${parsedData.tokenType} ${parsedData.token}` // updated\n            })\n          };\n\n          return this.http.get(`${environment.SERVER_URL}/profile`, httpOptions).subscribe(result => {\n            this.setProfileData(result);\n          });\n        }\n      }));\n    }\n    getloadedProfile() {\n      return from(Preferences.get({\n        key: 'authProfile'\n      })).pipe(map(profile => {\n        const parsedData = JSON.parse(profile.value);\n        const loadedProfile = [];\n        loadedProfile.push(new Profile(parsedData.identificador, parsedData.firstName, parsedData.lastName, parsedData.email, parsedData.gender, parsedData.birthdate, parsedData.avatar, parsedData.address, parsedData.actualPlan, parsedData.actualPlanFinishDate, parsedData.clasesConsumidas, parsedData.clasesPerdidas, parsedData.clasesTotales));\n        return loadedProfile;\n      }));\n    }\n    setProfileData(profileData) {\n      this._profile.next(new Profile(profileData.data.identificador, profileData.data.nombre, profileData.data.apellido, profileData.data.correo, profileData.data.genero, new Date(profileData.data.fechaNacimiento), profileData.data.avatar, profileData.data.direccion, profileData.data.rels.active_plan ? profileData.data.rels.active_plan.plan : null, profileData.data.rels.active_plan ? profileData.data.rels.active_plan.expiration : null, profileData.data.rels.stats ? profileData.data.rels.stats.clases_consumed : null, profileData.data.rels.stats ? profileData.data.rels.stats.clases_lost : null, profileData.data.rels.stats ? profileData.data.rels.stats.clases_quantity : null));\n      this.storeProfileData(profileData.data.identificador, profileData.data.nombre, profileData.data.apellido, profileData.data.correo, profileData.data.genero, new Date(profileData.data.fechaNacimiento), profileData.data.avatar, profileData.data.direccion, profileData.data.rels.active_plan ? profileData.data.rels.active_plan.plan : null, profileData.data.rels.active_plan ? profileData.data.rels.active_plan.expiration : null, profileData.data.rels.stats ? profileData.data.rels.stats.clases_consumed : null, profileData.data.rels.stats ? profileData.data.rels.stats.clases_lost : null, profileData.data.rels.stats ? profileData.data.rels.stats.clases_quantity : null);\n    }\n    /** This allow to storage the user on app storage */\n    storeProfileData(identificador, nombre, apellido, correo, genero, fechaNacimiento, avatar, direccion, actualPlan, actualPlanExpiration, clasesConsumidas, clasesPerdidas, clasesTotales) {\n      const data = JSON.stringify({\n        identificador,\n        nombre,\n        apellido,\n        correo,\n        genero,\n        fechaNacimiento,\n        avatar,\n        direccion,\n        actualPlan,\n        actualPlanExpiration,\n        clasesConsumidas,\n        clasesPerdidas,\n        clasesTotales\n      });\n      Preferences.set({\n        key: 'authProfile',\n        value: data\n      });\n    }\n    static #_ = this.ɵfac = function ProfileService_Factory(t) {\n      return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProfileService,\n      factory: ProfileService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ProfileService;\n})();\nexport { ProfileService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
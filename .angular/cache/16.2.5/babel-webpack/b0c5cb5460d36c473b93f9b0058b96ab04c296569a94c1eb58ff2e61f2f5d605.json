{"ast":null,"code":"import _asyncToGenerator from \"C:/dev/Ionic/purasangre-app-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate, __metadata } from \"tslib\";\n// ENV\nimport { environment } from '../../../environments/environment';\nimport { Router } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ToastController, AlertController, ModalController } from '@ionic/angular';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../auth/auth.service';\nimport { ProfileService } from './profile.service';\nimport { Preferences } from '@capacitor/preferences';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\n/**\n * Convert image string into image file\n *\n * @return  Blob\n */\nfunction base64toBlob(base64Data, contentType) {\n  contentType = contentType || '';\n  const sliceSize = 1024;\n  const byteCharacters = window.atob(base64Data);\n  const bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n    const bytes = new Array(end - begin);\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n  return new Blob(byteArrays, {\n    type: contentType\n  });\n}\nlet ProfilePage = class ProfilePage {\n  constructor(router, profileService, http, authService, toastController, alertCtrl, viewCtrl) {\n    this.router = router;\n    this.profileService = profileService;\n    this.http = http;\n    this.authService = authService;\n    this.toastController = toastController;\n    this.alertCtrl = alertCtrl;\n    this.viewCtrl = viewCtrl;\n    this.variable = 'variable';\n  }\n  ionViewWillEnter() {\n    console.log('ionViewWillEnter');\n    this.profileService.profileId.pipe(map(isAuthenticated => {\n      if (isAuthenticated) {\n        // console.log('esta autenticado men, no necesita pedir el profile a la api');\n        this.loadedProfile = null;\n        this.profileService.profile.subscribe(profile => {\n          this.loadedProfile = profile;\n        });\n      } else {\n        this.profileService.fetchProfile().subscribe();\n      }\n    })).subscribe();\n  }\n  // public fileTransfer: FileTransferObject = this.transfer.create();\n  // Refresh\n  doRefresh(event) {\n    console.log('Begin async operation');\n    setTimeout(() => {\n      Preferences.remove({\n        key: 'authProfile'\n      });\n      this.profileService.fetchProfile().subscribe();\n      console.log('Async operation has ended');\n      event.target.complete();\n    }, 2000);\n  }\n  presentToast(message) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const toast = yield _this.toastController.create({\n        message,\n        duration: 2500,\n        position: 'top'\n      });\n      toast.present();\n    })();\n  }\n  takePicture() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const image = yield Camera.getPhoto({\n        quality: 60,\n        width: 720,\n        allowEditing: false,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Prompt\n      });\n      // input.append('avatar',image.base64String,'avatar');\n      const input = new FormData();\n      input.append('avatar', image.base64String);\n      Preferences.get({\n        key: 'authData'\n      }).then(authData => {\n        const parsedData = JSON.parse(authData.value);\n        const httpOptions = {\n          headers: new HttpHeaders({\n            Authorization: `Bearer ${parsedData.token}`\n          })\n        };\n        _this2.http.post(`${environment.SERVER_URL}/api/profile/avatar`, input, httpOptions).subscribe(result => {\n          console.log('avataaaar!');\n          console.log(result);\n          _this2.presentToast('datos actualizados con éxito');\n          _this2.ionViewWillEnter();\n        });\n      });\n      // this.photo = this.sanitizer.bypassSecurityTrustResourceUrl(image && (image.dataUrl));\n      // this.photo = this.sanitizer.bypassSecurityTrustResourceUrl(image && (image.dataUrl));\n      // this.photo = this.sanitizer.bypassSecurityTrustResourceUrl(image.webPath);\n      // this.photo = this.sanitizer.bypassSecurityTrustResourceUrl(\"data:Image/*;base64,\"+image.dataUrl);\n      // console.log(\"Aqui va la var photo: \"+this.photo);\n    })();\n  }\n  // selectImageFromCamera() {\n  //     // this.presentToast('images!!!');\n  //     const options: CameraOptions = {\n  //         quality: 60,\n  //         destinationType: this.camera.DestinationType.FILE_URI,\n  //         sourceType: this.camera.PictureSourceType.PHOTOLIBRARY,\n  //         correctOrientation: true,\n  //         targetWidth: 400,\n  //         targetHeight: 400,\n  //     };\n  //     Camera.getPhoto(options).then((imageData) => {\n  //         this.crop.crop(imageData, {})\n  //             .then(newImage => {\n  //                 // this.imageURI = imageData;\n  //                 const options1: FileUploadOptions = {\n  //                     fileKey: 'image',\n  //                     fileName: 'avatar.jpg',\n  //                     headers: {}\n  //                 };\n  //                 this.fileTransfer.upload(newImage, IMAGE_URL + 'api/users/' +\n  //                     this.user.identificador + '/image', options1)\n  //                         .then((data) => {\n  //                             // success\n  //                         // console.log(\"success\");\n  //                         this.presentToast('Imagen actualizada.');\n  //                         this.ionViewDidEnter();\n  //                     }, (err) => {\n  //                         // error\n  //                         this.presentToast('Error al subir imagen');\n  //                         console.log('Source: ' + JSON.stringify(err.source) +\n  //                             ' Target: ' + JSON.stringify(err.target) + ' Code: ' +\n  //                             JSON.stringify(err.code)\n  //                         );\n  //                     });\n  //         }, error => {\n  //             this.presentToast('Error al ajustar imagen');\n  //             console.error('Error ajustando imagen', error);\n  //             // this.alerts.push('Error cropping image');\n  //         });\n  //     }, (err) => {\n  //         console.log('error camera');\n  //         console.log(err);\n  //         // this.presentToast('Error camara: '+err, 10000);\n  //     });\n  // }\n  onPickImage(imageData) {\n    let imageFile;\n    if (typeof imageData === 'string') {\n      try {\n        imageFile = base64toBlob(imageData.replace('data:image/jpeg;base64,', ''), 'image/jpeg');\n      } catch (error) {\n        console.log(error);\n        return;\n      }\n    } else {\n      imageFile = imageData;\n    }\n    console.log('entre a onPickImage...');\n    console.log(imageFile);\n    Preferences.get({\n      key: 'authData'\n    }).then(authData => {\n      const parsedData = JSON.parse(authData.value);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          Authorization: `Bearer ${parsedData.token}`\n        })\n      };\n      const avatar = new FormData();\n      avatar.append('avatar', imageFile);\n      console.log(avatar);\n      this.http.post(`${environment.IMAGE_URL}/api/users/${this.loadedProfile.id}/image`, avatar, httpOptions).subscribe(result => {\n        this.presentToast('datos actualizados con éxito');\n        this.ionViewWillEnter();\n      }, err => {\n        console.log(err);\n        console.log('aqui estoy');\n        this.viewCtrl.dismiss();\n        this.presentToast('No se ha podido actualizar la imagen de perfil');\n      });\n    });\n  }\n  // takePicture() {\n  //     // this.actionSheetCtrl.create({\n  //     //     header: 'Cambiar Foto de Perfil',\n  //     //     buttons: [\n  //     //         {\n  //     //             text: 'Tomar una Foto',\n  //     //             handler: () => {\n  //     //                 this.openBookingModal('select');\n  //     //             }\n  //     //         },\n  //     //         {\n  //     //             text: 'Importar de mi Galería',\n  //     //             handler: () => {\n  //     //                 this.openBookingModal('random');\n  //     //             }\n  //     //         },\n  //     //         {\n  //     //             text: 'Cancelar',\n  //     //             role: 'cancel'\n  //     //         }\n  //     //     ]\n  //     // }).then(actionSheetEl => {\n  //     //     actionSheetEl.present();\n  //     // });\n  // }\n  onLogout() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this3.alertCtrl.create({\n        header: 'Cerrar Sesión',\n        message: 'Desea salir de Purasangre?',\n        buttons: [{\n          text: 'Cancelar',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: blah => {\n            console.log('Confirm Cancel: blah' + blah);\n          }\n        }, {\n          text: 'Salir',\n          handler: () => {\n            _this3.authService.logout();\n          }\n        }]\n      });\n      yield alert.present();\n    })();\n  }\n  //     this.alertCtrl\n  //         .create({\n  //             message: 'Salir de PuraSangre?',\n  //             buttons:\n  //                 ['Cancelar',\n  //                 'Salir'\n  //             ]\n  //         }).then(alertEl => alertEl.present());\n  //     // this.authService.logout();\n  // }\n  tutorial() {\n    // this.firebase.logEvent('view_tutorial', {content_type: 'page_view', item_id: 'view_tutorial'});\n    this.router.navigateByUrl('/tutorial');\n  }\n  goToHistorial() {\n    this.router.navigate(['/home/pay-historial']);\n  }\n};\nProfilePage = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.page.html',\n  styleUrls: ['./profile.page.scss']\n}), __metadata(\"design:paramtypes\", [Router, ProfileService, HttpClient, AuthService, ToastController, AlertController, ModalController])], ProfilePage);\nexport { ProfilePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"C:/dev/Ionic/purasangre-app-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '../../../environments/environment';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport { Preferences } from '@capacitor/preferences';\nimport { Network } from '@capacitor/network';\nimport { PushNotifications } from '@capacitor/push-notifications';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction HomePage_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \"Sin conexi\\u00F3n\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomePage_p_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 13);\n    i0.ɵɵtext(1, \"De nuevo en l\\u00EDnea\");\n    i0.ɵɵelementEnd();\n  }\n}\nlet HomePage = /*#__PURE__*/(() => {\n  class HomePage {\n    constructor(modalController, alertCtrl, http) {\n      this.modalController = modalController;\n      this.alertCtrl = alertCtrl;\n      this.http = http;\n      this.statusConnection = true;\n      this.animationState = 'invisible'; // Or Enum with visible/invisible.\n    }\n\n    ngOnInit() {\n      this.checkConnection();\n      // console.log('i´m here at the home page');\n      console.log('Initializing HomePage');\n      // Register with Apple / Google to receive push via APNS/FCM\n      PushNotifications.requestPermissions().then(result => {\n        if (result.receive === 'granted') {\n          // Register with Apple / Google to receive push via APNS/FCM\n          PushNotifications.register();\n        } else {\n          // Show some error\n        }\n      });\n      // On success, we should be able to receive notifications\n      PushNotifications.addListener('registration', token => {\n        const pushToken = token.value;\n        Preferences.get({\n          key: 'authData'\n        }).then(authData => {\n          const parsedData = JSON.parse(authData.value);\n          const httpOptions = {\n            headers: new HttpHeaders({\n              Authorization: `Bearer ${parsedData.token}` // updated\n            })\n          };\n\n          this.http.post(`${environment.SERVER_URL}/fcm/token/`, {\n            fcmtoken: pushToken\n          }, httpOptions).subscribe(result => {\n            console.log('success to post token');\n          }, err => {\n            console.log('error to post token');\n            console.log(err);\n          });\n        });\n        console.log('Push registration success, token: ' + token.value);\n      });\n      // Some issue with our setup and push will not work\n      PushNotifications.addListener('registrationError', error => {\n        alert('Error on registration: ' + JSON.stringify(error));\n      });\n      // Show us the notification payload if the app is open on our device\n      PushNotifications.addListener('pushNotificationReceived', notification => {\n        const header = notification.title || 'Notificación';\n        const message = notification.body;\n        console.log('header: ' + header, 'message: ' + message);\n        if (message) {\n          this.alertCtrl.create({\n            header,\n            message,\n            buttons: ['Entendido']\n          }).then(alertEl => alertEl.present());\n        }\n      });\n      // Method called when tapping on a notification\n      PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n        const header = notification.notification.data.title;\n        const message = notification.notification.data.body;\n        // const data: any = notification.notification.data;\n        // console.log('data');\n        // console.log(data);\n        // console.log('data title');\n        // console.log(data.title);\n        // console.log('data body');\n        // console.log(data.body);\n        console.log('header: ' + header, 'message: ' + message);\n        if (message) {\n          this.alertCtrl.create({\n            header,\n            message,\n            buttons: ['Entendido']\n          }).then(alertEl => alertEl.present());\n        }\n        // console.log('Notification data title');\n        // console.log(notification.notification.data.title);\n        // console.log('Notification data body');\n        // console.log(notification.notification.data.body);\n      });\n    }\n    /**\n     * Keep listen for status connection change,\n     * and show an animation alert if it happens\n     *\n     * @return void\n     */\n    checkConnection() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const handler = Network.addListener('networkStatusChange', estado => {\n          if (estado.connected === true) {\n            _this.statusConnection = true;\n            _this.animationState = 'invisible';\n            console.log(_this.animationState);\n          }\n          if (estado.connected === false) {\n            _this.statusConnection = false;\n            if (_this.animationState === 'invisible') {\n              _this.animationState = 'visible';\n            }\n          }\n        });\n      })();\n    }\n    static #_ = this.ɵfac = function HomePage_Factory(t) {\n      return new (t || HomePage)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HomePage,\n      selectors: [[\"app-home\"]],\n      decls: 13,\n      vars: 3,\n      consts: [[\"slot\", \"bottom\"], [\"tab\", \"dashboard\"], [\"src\", \"assets/icon/icon-dashboard.svg\"], [\"tab\", \"clases\"], [\"src\", \"assets/icon/icon-reservas.svg\"], [\"tab\", \"plans\"], [\"src\", \"assets/icon/icon-pagos.svg\"], [\"tab\", \"profile\"], [\"src\", \"assets/icon/icon-profile.svg\"], [1, \"connection-status\"], [\"class\", \"no\", 4, \"ngIf\"], [\"class\", \"yes\", 4, \"ngIf\"], [1, \"no\"], [1, \"yes\"]],\n      template: function HomePage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-tabs\")(1, \"ion-tab-bar\", 0)(2, \"ion-tab-button\", 1);\n          i0.ɵɵelement(3, \"ion-icon\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"ion-tab-button\", 3);\n          i0.ɵɵelement(5, \"ion-icon\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"ion-tab-button\", 5);\n          i0.ɵɵelement(7, \"ion-icon\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ion-tab-button\", 7);\n          i0.ɵɵelement(9, \"ion-icon\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 9);\n          i0.ɵɵtemplate(11, HomePage_p_11_Template, 2, 0, \"p\", 10);\n          i0.ɵɵtemplate(12, HomePage_p_12_Template, 2, 0, \"p\", 11);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"@animation\", ctx.animationState);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.animationState == \"visible\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.animationState != \"visible\");\n        }\n      },\n      dependencies: [i3.NgIf, i1.IonIcon, i1.IonTabBar, i1.IonTabButton, i1.IonTabs],\n      data: {\n        animation: [trigger('animation', [state('invisible', style({\n          height: '0px',\n          'padding-top': '0',\n          'padding-bottom': '0'\n        })), state('visible', style({\n          height: '*',\n          'padding-top': '*',\n          'padding-bottom': '*'\n        })), transition('invisible => visible', animate('0.2s')), transition('visible => invisible', animate('0.3s 1.5s'))])]\n      }\n    });\n  }\n  return HomePage;\n})();\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}